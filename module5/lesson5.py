print('Список и элементы списка')
#new_list = [element1, element2, element3]   
# Как ждому элементу списка присуждется свой  индекс начиная с нуля[0, 1, 2]
city_list = ['Москва', 'Париж', 'Лондон', 'Нью Йорк']

print(city_list)
print(city_list[0])
print(city_list[1])
print(city_list[2])
print(city_list[3])

print(len(city_list))   # Для того чтобы получить длину списка используется функция len():
# Мы можем получать элементы списка с конца, для этого используются отрицательные индексы. 
# Самый последний элемент списка можно получить по индексу -1

print(city_list[-1])
print(city_list[-2])

# Нельзя называть переменные списков просто list т.к. 
# list - это предопределенный объект в Python

city_list = ['Москва', 100, 'Париж', 200, 'Лондон', 300, 'Нью Йорк', 400]
message1 = f'Население города {city_list[0]} = {city_list[1]}'
message2 = f'Население городов {city_list[2]} и {city_list[4]} = {city_list[3]+city_list[5]}'
print(message1)
print(message2)
print('----------------------------')

print('Изменение элементов списка')
# Элементы списка можно передавать в переменные, а потом работать с этими переменными.

city_list = ['Москва', 'Париж', 'Лондон', 'Нью Йорк']
moscow = city_list[0]
print('Переменная moscow ДО изменения =', moscow)   

moscow = 'Питер'
print('Переменная moscow ПОСЛЕ изменения =', moscow)

print('Список =', city_list)
#Создавая переменную, мы создаем новый объект 
# и дальше этот объект будет жить своей жизнью т.е., 
# если изменить переменную moscow, то первый элемент в списке не изменится т.к. 
# city_list и moscow - это два разных объекта.
print('------------------------------')

# Для того чтобы изменить элемент в списке, необходимо обратиться к нему по индексу. 
# Изменим первый элемент списка:
city_list = ['Москва', 'Париж', 'Лондон', 'Нью Йорк']
print('Список ДО изменения =', city_list)

# Меняем первый элемент списка, обращаясь к нему по индексу 0
city_list[0] = 'Питер'

print('Список ПОСЛЕ изменения =', city_list)
print('------------------------------')

print('Срезы в списках')

# Для списков также как и для строк доступны срезы. 
# Например, получим первые 2 элемента списка - 
# если нужно получить срез с самого первого элемента, то индекс 0 можно не указывать:

city_list = ['Москва', 'Париж', 'Лондон', 'Нью Йорк']

print(city_list[:2])

# Если нужно получить все элементы с указанного и до последнего, то индекс конца среза можно не указывать:

city_list = ['Москва', 'Париж', 'Лондон', 'Нью Йорк']

print(city_list[2:])

#Срез всегда возвращает список.
#Даже если в срезе будет один элемент, то результатом среза будет список из 1 элемента:

city_list = ['Москва', 'Париж', 'Лондон', 'Нью Йорк']

print(city_list[:1])
print(city_list[1:2])
print(city_list[2:3])

print('---------------')

print('Методы списков')

#Для того, чтобы получить сумму всех элементов списка можно использовать функцию sum():
digits = [1, 2, 3, 4]
s = sum(digits) #10
print(s)
#Чтобы добавить элемент в список используется метод append(). Создадим пустой список и добавим в него элементы:
city_list = []
city_list.append('Москва')
city_list.append('Париж')
city_list.append('Лондон')

print(city_list)

#Для удаления элемента из списка можно использовать метод remove(). 
# В метод remove() передается сам элемент списка, при этом remove() ничего не возвращает:
city_list = ['Москва', 'Париж', 'Лондон']

city_list.remove('Париж')

print(city_list)
#В метод remove() можно передать элемент списка, получив его по индексу
city_list = ['Москва', 'Париж', 'Лондон']

city_list.remove(city_list[0])

print(city_list)
#Также удалить элемент из списка можно просто по индексу, для этого используется ключевое слово del. 
# В отличие от метода remove(), в который нужно передать элемент списка, 
# для метода del нужен только индекс элемента:

city_list = ['Москва', 'Париж', 'Лондон']

del city_list[0]

print(city_list)

#Извлечение элемента из списка
#Метод pop() извлекает элемент из списка по индексу и передает его значение переменной. 
# Метод pop() также как и метод remove() выполняет удаление элемента из списка, 
# но в отличие от метода remove(), метод pop() возвращает удаляемый элемент. 
# Таким образом мы можем удалить элемент из списка и запомнить удаленный элемент
city_list = ['Москва', 'Лондон', 'Париж']

# Извлекаем из списка элемент с индексом 1
# и присваиваем его значение в переменную removed_city
removed_city = city_list.pop(1)
print(removed_city)

#Поиск в списке
#С помощью метода index() можно найти элемент в списке. 
# Метод index() возвращает индекс найденного элемента. 
# Регистр имеет значение. Если искомого элемента нет в списке, то метод index() приведет к ошибке
city_list = ['Москва', 'Лондон', 'Париж']

element1 = city_list.index('Лондон')  # 1
element2 = city_list.index('Москва')  # ValueError: 'москва' is not in list

#Подсчет элементов
#Метод count() считает количество элементов в списке с учетом регистра:
city_list = ['Москва', 'Париж', 'Москва', 'Москва']

print(city_list.count('Москва'))
print(city_list.count('москва'))

#Сортировка списка
#Метод sort() сортирует список по возрастанию:

city_list = [1, -1, 2, 0]

city_list.sort()
print(city_list)

#Метод sort() может принимать параметр reverse - сортировка по убыванию:
city_list = [1, -1, 2, 0]

city_list.sort(reverse=True)
print(city_list)

#Перевернуть список
#Метод reverse() просто переворачивает список:
city_list = [10, -10, 20, -20]

city_list.reverse()
print(city_list)
print('-------')


print('Кортежи')
#Кортеж (от англ. tuple - кортеж) - это неизменяемая коллекция в Python. 
# Кортеж похож на список, разница в том, что после того как кортеж создан, его уже нельзя менять - 
# нельзя добавлять в кортеж элементы, нельзя удалить элементы из кортежа, нельзя сортировать кортеж.

#Кортеж создается с помощью круглых скобок ():
days_of_week = ('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday')
monday = days_of_week[0]
friday = days_of_week[4]
sunday = days_of_week[6]

print('Начало недели:', monday)
print('Крутой день:', friday)
print('Конец недели:', sunday)
weekends = days_of_week[5:7]

print('Выходные:', weekends)

print('--------------')

print('Вложенные коллекции')

#Коллекции можно вкладывать друг в друга:

my_list = ['meal', ['Омлет', 'Морковный суп', ], 'days', ['monday', 'tuesday', ]]
dishes = my_list[1]  # ['Омлет', 'Морковный суп']
breakfast = my_list[1][0]  # 'Омлет'
lunch = my_list[1][1]   # 'Морковный суп'