# Оператор in - проверка наличия ключа

# Мы можем проверить имеется ли ключ в словаре или нет, для этого используется оператор in

person = {'name': 'Bob'}    # Задаем значение ключа и значения

if 'name' in person:    # Проверяем на наличие ключа name в словаре
    print('Ключ name присутствует в словаре')
else:
    print('Ключ name не присутствует в словаре')

if 'age' in person: # Проверяем на наличие ключа age в словаре
    print('Ключ age присутствует в словаре')
else:
    print('Ключ age не присутствует в словаре')


# Обход словаря по ключам - метод keys

# Метод keys() (от англ. keys - ключи) возвращает список всех ключей словаря

student = {'name': 'Иван', 'age': 18, 'cities': ['Москва', 'Лондон']}   # Задаем ключи и значения словарю

print(student.keys())
# В результате возвращается список. Мы можем обойти этот список циклом и получить значение каждого ключа:

student = {'name': 'Иван', 'age': 18, 'cities': ['Москва', 'Лондон']}   # Задаем ключи и значения словарю
for key in student.keys():  # Добавляем в значение key ключи из словаря studen
    print(f'Ключ: {key}; значение: {student[key]}' )


# Обход словаря по значения - метод values
# Метод values() (от англ. values - значения) возвращает список всех значений словаря:

student = {'name': 'Иван', 'age': 18, 'cities': ['Москва', 'Лондон']}  
for value in student.values():
    print(value)

# Обход словаря по элементам - метод items
# Метод items() (от англ. items - элементы) возвращает список элементов словаря. 
# В полученном списке каждый элемент будет являться кортежем из 2х значений, 
# первое значение кортежа - ключ словаря, второе значение кортежа - значение ключа:

student = {'name': 'Иван', 'age': 18, 'cities': ['Москва', 'Лондон']}

for item in student.items():
    print(item)

# Цикл for может принимать не 1 счетчик, а 2 (даже 3 и 4 и сколько угодно больше).
#  Если у цикла несколько счетчиков, то они перечисляются через запятую. 
# Напишем цикл for, который перебирает элементы словаря, используя 2 счетчика:

student = {'name': 'Иван', 'age': 18, 'cities': ['Москва', 'Лондон']}

for key, value in student.items():
    print(key, '=', value)

# Обход словаря по элементам - это достаточно популярная задача, 
# поэтому среди программистов принято сокращать имена счетчиков до k и v:

student = {'name': 'Иван', 'age': 18, 'cities': ['Москва', 'Лондон']}

for k, v in student.items():
    print(k, '=', v)

# Копирование словарей - метод copy
# Словарь - это мутабельный тип данных, 
# поэтому копировать словари простым присваиванием не получится (также как и со списками).

student1 = {'name': 'Ivan', }
# # Создаем словарь 2 как копия словаря 1
student2 = student1
# Меняем значение ключа name в словаре 2
student2['name'] = 'Maria'
# Выводим значение ключа name из словаря 1
print(student1['name'])

# 2 primer

student1 = {'name': 'Иван', }

student2 = student1.copy()
student2['name'] = 'Мария'

print(student1['name'])