print('Цикл for')
# Конструкция цикла for
#for element(элемент из коллекции) in interation_object(коллекция элементов, которые перебирают цикл):
    # code
# для каждого элемент из коллекции:
    # код который выполняется в цикле

#Цикл в программировании используется для того, 
# чтобы обойти коллекцию элементов и выполнить код на каждом круге обхода. 
# В Python есть 2 цикла - for и while. Начнем с цикла for.

#Синтаксис цикла for следующий:
#for element in interation_object:
    # код программы

#Цикл for (от англ. for - для) означает: 
# для каждого элемента element из коллекции iteration_object выполнить код_программы

numbers = [100, 200, 300, 400, 500]

for number in numbers:
    print('число', number)

print('Конец программы!')

# В Python есть итерируемые и не итерируемые объекты. 
# Объект, который состоит из элементов с индексами называется итерируемый. 
# Список - это итерируемый объект. 
# Строка - это тоже итерируемый объект, кортеж - тоже итерируемый т.к. он тоже состоит из элементов:

letters = 'abcde'

for letter in letters:
    print('буква', letter)

#Число - это не итерируемый объект. Число нельзя обойти циклом. Следующий код вернет ошибку:

#letters = 1000

#for letter in letters:
    #print('буква', letter)

# Результат: TypeError: 'int' object is not iterable

numbers = [100, 200, 300, 400, 500]

for number in numbers:
    print('число', number)

print('Конец программы!')
print('--------')

print('Диапозоны')
# Итерироваться можно не только по коллекции, но и по диапазону. Диапазон для цикла задается функцией range(), в скобках через запятую передается начало и конец диапазона. Например, вызовем функцию print() 5 раз:

for i in range(0,5):
    print(i)
# верхняя граница диапазона (т.е. 5) не включается. 
# Диапазон range() работает по аналогии со срезами в списках - 
# берутся все значения от начала диапазона включительно, ДО верхней границы, 
# а сама верхняя граница не берется.

for i in range(100,102):
    print(i)

#Нижнюю границу диапазона можно не указывать, тогда будут выведены значения от 0:

for i in range(3):
    print(i)

# Можно выводить значения с шагом, для этого нужно передать 3й аргумент - шаг.
#  Выведем все числа от 1 до 10 с шагом 2:
for i in range(1, 11, 2):
    print(i)

print('--------')

print('Тело цикла')

# Блок кода, который идет внутри цикла называется телом цикла. 
# В теле цикла мы можем написать любой, сколько угодно длинный код, 
# можно вкладывать другие циклы, писать условия и т.д.

numbers = [1, 2, 5, 11, 20]
for number in numbers:
    if number % 2 == 0:
        print(number)

# В этом коде мы итерируемся по списку numbers - перебираем каждый элемент, пока список не кончится. 
# Счетчик цикла - number. На каждой итерации счетчик цикла принимает значение очередного элемента списка. 
# В теле цикла мы проверяем значение элемента - если оно делится на 2 без остатка, то это четное число.

print('------')

print('Сумма всех значений списка')

#Рассмотрим другую задачу - посчитать сумму всех чисел списка, при условии, 
# что в списке могут быть вложенные списки и кортежи:

numbers = [(1, 1.5), [2, 2.5], (3, 'abc')]

result = 0
for i in numbers:
    if isinstance(i, (list, tuple)):
        for j in i:
            if isinstance(j, (int, float)):
                result += j
    elif isinstance(i, (int, float)):
        result += i
print('Сумма всех чиел =', result) 


numbers = [1, [2, 2.5], (3, '3')]

result = 0
for i in numbers:
    if isinstance(i, (list, tuple)):
        for j in i:
            if isinstance(j, (int, float)):
                result += j
    elif isinstance(i, (int, float)):
        result += i
print('Сумма всех чиел =', result) 

# Первым действием мы создаем переменную result равную 0 - в ней будем хранить сумму всех чисел. 
# Затем обходим список numbers. Счетчик списка - i.

#Элемент списка может быть числом, а может быть вложенным списком или кортежем, 
# поэтому сначала мы проверяем тип элемента с помощью функции isinstance(). 
# Второй параметр функции isinstance() - это проверяемый тип, можно делать проверки сразу на несколько типов,
# перечислив их в кортеже. Мы проверяем на типы list (список) и tuple (кортеж):
#if isinstance(i, (list, tuple)):

#Если условие выполняется и текущий элемент списка - это тоже список или кортеж, 
# то мы запускаем цикл по этому вложенному списку/кортежу:
# for j in i:
    #if isinstance(j, (int, float)):
        #result += j

# о вложенном цикле мы проверяем - если тип элемента целое число (int) 
# или число с плавающей точкой (float), то увеличиваем переменную result:
#if isinstance(j, (int, float)):
    #result += j

# Если тип элемента списка numbers - это не вложенный список/кортеж, а число,
#  то увеличиваем переменную result без всяких вложенных циклов:
# elif isinstance(i, (int, float)):
    #result += i

print('-------')


print('изменение элементов коллекции')


# Создаем список городов
cities = ['Москва', 'Париж', 'Лондон']

# Выводим список городов до изменения
print(f'Список городов до изменения): {cities}')

# Вычисляем длину списка
new_list_len = len(cities)

# Итерируемся по списку городов
for i in range(new_list_len):
    ## В каждой итерации в переменную i будет передаваться значение от 0 до 3 (длины списка)
    # Получаем элемент списка по индексу i и записываем в него новое значение, равное 'Город: '
    #  + значение_элемента
    cities[i] = f'Город: {cities[i]}'


# Выводим список городов после изменения
print(f'Список городов после изменения): {cities}')


# В нашем коде мы создали переменную new_list_len, в которую передаем значение длины списка. 
# Под эту переменную выделяется частичка оперативной памяти. 
# Но мы используем ее только 1 раз как границу цикла и больше нигде не используем. 
# Мы можем обойтись без создания отдельной переменной и 
# перенести вычисление длины списка непосредственно в функцию range():

#for i in range(len(cities)):
    #cities[i] = f'Город: {cities[i]}'

    




